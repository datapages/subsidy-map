[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "state Incentives Map",
    "section": "",
    "text": "Plot = import(\"https://esm.sh/@observablehq/plot\")\n\n//redivis = require(\"redivis\")\n//reg = await redivis\n// .user(\"stanford_templates\")\n// .dataset(\"subsidy_map\")\n// .table(\"state_disclosure_regimes\")\n// .listRows()\n\n//reg = FileAttachment(\"regimes.csv\").csv()\n\nreg = transpose(regime_data)\n\ndir = (int, ext) =&gt; (\n  [int === \"Y\" ? \"internal\" : \"\", ext === \"Y\" ? \"external\" : \"\"].filter(Boolean)\n)\n\nregimes = reg.map(obj =&gt; ({\n  ...obj,\n  year: new Date(obj.year.toString(), 0, 1),\n  direction: dir(obj.internal, obj.external)\n}));\n\n// map\n// adapted from https://observablehq.com/@mbostock/u-s-state-map\nviewof state = {\n  let value = null;\n  \n  const colors = { excluded: \"#ccc\", included: \"#B83A4B\" };\n  const dim = 0.6;\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, 975, 610])\n  const statesGroup = svg.append(\"g\");\n  \n  // state shapes\n  statesGroup.selectAll(\"path\")\n    .data(topojson.feature(us, us.objects.states).features)\n    .enter().append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"data-id\", d =&gt; d.id)\n      .attr(\"fill\", d =&gt; states.get(d.id).included ? colors.included : colors.excluded)\n      .attr(\"fill-opacity\", dim)\n      .on(\"click\", (event, d) =&gt; {\n        if (states.get(d.id).included) {\n          // set value to clicked state\n          const node = svg.node();\n          node.value = value = value === d.id ? null : d.id;\n          node.dispatchEvent(new Event(\"input\", {bubbles: true}));\n          // change clicked state opacity\n          statesGroup.selectAll(\"path\")\n            .attr(\"fill-opacity\", d =&gt; value === d.id ? 1 : dim)\n        }\n      })\n      .on(\"mouseover\", (event, d) =&gt; {\n        if (states.get(d.id).included) {\n          // change hovered state opacity\n          statesGroup.select(`path[data-id=\"${d.id}\"]`)\n            .attr(\"fill-opacity\", 1);\n        }\n      })\n      .on(\"mouseout\", (event, d) =&gt; {\n        if (states.get(d.id).included) {\n          // reset hovered state opacity\n          statesGroup.select(`path[data-id=\"${d.id}\"]`)\n            .attr(\"fill-opacity\", d =&gt; value === d.id ? 1 : dim);\n        }\n      });\n  \n  // text labels\n   statesGroup.selectAll(\"text\")\n    .data(topojson.feature(us, us.objects.states).features)\n    .enter().append(\"text\")\n      .filter(d =&gt; states.get(d.id).included)\n      .attr(\"transform\", d =&gt; `translate(${path.centroid(d)})`)\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"pointer-events\", \"none\")\n      .text(d =&gt; states.get(d.id).abbr);\n\n  // outlines\n  svg.append(\"path\")\n    .datum(topojson.mesh(us, us.objects.states, (a, b) =&gt; a !== b))\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-linejoin\", \"round\")\n    .attr(\"pointer-events\", \"none\")\n    .attr(\"d\", path);\n\n  return Object.assign(svg.node(), {value: null});\n}\n\nus = FileAttachment(\"states-albers-10m.json\").json() // map topology\nabbr = FileAttachment(\"states-abbr.json\").json() // state names + abbreviations\n\nstates = new Map(us.objects.states.geometries.map(\n  d =&gt; [d.id, {\"name\": d.properties.name,\n               \"abbr\": abbr[d.properties.name],\n               \"included\": regimes.map(d =&gt; d.state).includes(d.properties.name)}])\n)\n\npath = d3.geoPath()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstate_obj = states.get(state)\nstate_name = state_obj ? state_obj[\"name\"] : null\n\n// all regimes with selected state variable\nreg_state = regimes.map(obj =&gt; ({\n  ...obj,\n  curr_state: state_name ? obj.state === state_name : true\n}));\n\n// only regimes for selected state\nreg_curr = reg_state.filter(d =&gt; d.curr_state)\n\n// dot plot\nviewof timeline = Plot.plot({\n  height: 500,\n   width: 400,\n       x: {label: \"Year\"},\n   color: {range: [\"#ccc\", \"#B83A4B\"]},\n   marks: [\n    Plot.dot(reg_state,\n      Plot.dodgeY({\n              x: \"year\",\n           fill: \"curr_state\",\n           sort: \"curr_state\",\n        reverse: true\n        })\n      ),\n   ]\n})\n\n// place map and plot side by side\nhtml`&lt;div style=\"display: flex; align-items: center;\"&gt;\n &lt;div style=\"flex-basis:50%\"&gt; ${viewof state}    &lt;/div&gt;\n &lt;div style=\"flex-basis:50%\"&gt; ${viewof timeline} &lt;/div&gt;\n&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof reg_search = Inputs.search(reg_curr)\n\n// table\nviewof row = Inputs.table(reg_search, {\n  rows: 100, // rows displayed at start\n  sort: \"year\", reverse: true, // reverse chronological order\n  multiple: false, // only select one row at a time\n  required: false, // if nothing is selected, selection is empty\n  columns: [\n    \"state\",\n    \"year\",\n    \"direction\",\n    \"disclosure_law\",\n  ],\n  header: {\n    year: \"Year\",\n    direction: \"\",\n    disclosure_law: \"Disclosure law\",\n  },\n  format: {\n    year: x =&gt; x.getFullYear(),\n    direction: badgify\n  }\n})\n\nbadgify = x =&gt; htl.html`&lt;div&gt;\n  ${x.map(y =&gt; htl.html.fragment`\n    &lt;span class=\"badge ${y}\"&gt;${y}&lt;/span&gt;`)}\n&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction pullout(head, text) {\n  return htl.html.fragment`&lt;b&gt;${head}&lt;/b&gt;&lt;p&gt;${text}&lt;/p&gt;`\n}\n\nplaceholder = htl.html.fragment`&lt;p class=\"pullout\"&gt;&lt;i&gt;Select a row to see more information...&lt;/i&gt;&lt;/p&gt;`\nviewof pullouts = row ? htl.html.fragment`${pullout(\"Subsidy program affected\", row.program)} ${pullout(\"State statute\", row.state_statute)} ${pullout(\"Excerpt\", row.excerpt)}` : placeholder\n\nhtl.html`&lt;div class=\"grid-container\"&gt;\n &lt;div&gt; ${viewof row} &lt;/div&gt;\n &lt;div class=\"pullout\"&gt; ${viewof pullouts} &lt;/div&gt;\n&lt;/div&gt;`"
  }
]